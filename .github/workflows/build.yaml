name: Build

on:
  workflow_dispatch:
  pull_request:
    branches: [master]
    paths: vcpkg.json
  push:
    branches: [master]
    paths: vcpkg.json
    
permissions:
  contents: write 

env:
  # https://learn.microsoft.com/en-us/vcpkg/consume/binary-caching-github-actions-cache
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"

jobs:
  build:
    name: Build
    strategy:
      fail-fast: true
      matrix:
        artifact: [Linux, Win64]
        include:
          - artifact: Linux
            triplet-dynamic: x64-linux-dynamic
            triplet-static: x64-linux
            os: ubuntu-latest
            vcpkg: vcpkg
            vcpkg-bootstrap: ./bootstrap-vcpkg.sh
            schemagen: schemagen
          - artifact: Win64
            triplet-dynamic: x64-windows
            triplet-static: x64-windows-static
            bin: true
            headers: true
            os: windows-latest
            vcpkg: vcpkg.exe
            vcpkg-bootstrap: bootstrap-vcpkg.bat
            schemagen: schemagen.exe
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout vcpkg
        uses: actions/checkout@v4
        with:
          path: vcpkg
          fetch-depth: 0
          repository: microsoft/vcpkg
      - name: Checkout vcpkg.json
        uses: actions/checkout@v4
        with:
          path: config
          sparse-checkout: vcpkg.json
      - name: Install vcpkg.json
        run: mv config/vcpkg.json vcpkg/
      - name: Configure caching
        uses: actions/github-script@v7
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');
      - name: Bootstrap vcpkg
        run: ${{ matrix.vcpkg-bootstrap }}
        working-directory: vcpkg
      - name: Run vcpkg (dynamic)
        run: ${{ matrix.vcpkg }} install --triplet ${{ matrix.triplet-dynamic }}
        working-directory: vcpkg
      - name: Store dynamic build output
        run: |
          mkdir -p artifact
          mv vcpkg/vcpkg_installed/${{ matrix.triplet-dynamic }}/{debug,include,lib} artifact
      - name: Store dynamic build output (bin)
        if: ${{ matrix.bin }}
        run: mv vcpkg/vcpkg_installed/${{ matrix.triplet-dynamic }}/bin artifact
      - name: Run vcpkg (static)
        run: ${{ matrix.vcpkg }} install --triplet ${{ matrix.triplet-static }}
        working-directory: vcpkg
      - name: Store static build output
        run: |
          mkdir -p artifact
          mv vcpkg/vcpkg_installed/${{ matrix.triplet-static }}/tools artifact
      - name: Upload artifacts
        if: ${{ github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: artifact/*
          if-no-files-found: error
  push:
    if: ${{ github.ref == 'refs/heads/master' }}
    name: Push
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          path: repo
      - name: Retrieve artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Handle tools
        run: |
          rm -rf tools
          mkdir -p tools
          mv ../artifacts/*/tools/cppgraphqlgen/schemagen{,.exe} tools/
        working-directory: repo
      - name: Handle headers
        run: |
          rm -rf include
          mkdir -p include
          mv ../artifacts/Win64/include/* include
          git add include
        working-directory: repo
      - name: Handle bin
        run: |
          for rel in Linux Win64; do
            mkdir -p "bin/${rel}"
            mv "../artifacts/${rel}/bin/lib"/* "bin/${rel}"
            rm -rf "bin/${rel}/pkgconfig"
          done
        working-directory: repo
      - name: Handle debug
        run: |
          for rel in Linux Win64; do
            mkdir -p "debug/${rel}"
            mv "../artifacts/${rel}/debug/lib"/* "debug/${rel}"
            rm -rf "debug/${rel}/pkgconfig"
          done
        working-directory: repo
      - name: Handle libs
        run: |
          rm -rf lib
          for rel in Linux Win64; do
            mkdir -p "lib/${rel}"
            mv "../artifacts/${rel}/lib"/* "lib/${rel}"
            rm -rf "lib/${rel}/pkgconfig"
          done
        working-directory: repo
      - name: Write release name to file
        run: |
          for lib in . bin debug lib tools; do
            echo ${{ steps.release.outputs.name }} > "${lib}/.VERSION"
          done;
          git add .VERSION
        working-directory: repo
      - name: Compress
        run: |
          for lib in bin debug lib tools; do
            cd "${lib}"
            zip -r "../../${lib}.zip" * .VERSION
            cd -
          done
        working-directory: repo
      - name: Commit changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git diff-index --quiet HEAD || git commit --all --message "GHA build ${{ github.run_id }}-${{ github.run_attempt }}"
        working-directory: repo
      - name: Push
        run: git push
        working-directory: repo
      - name: Create release
        id: release
        run: |
          RELEASE_NAME="$(date -u '+%Y.%m.%d-%H%M%S')"
          echo "name=${RELEASE_NAME}" >> "$GITHUB_OUTPUT"
          gh release create --draft --notes "$(git show -s --format=%s)" --target ${{ github.sha }} \
          --title ${RELEASE_NAME} --repo ${{ github.repository }} ${RELEASE_NAME}
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: repo
      - name: Upload to release
        run: gh release upload ${{ steps.release.outputs.name }} --repo ${{ github.repository }} *.zip
        env:
          GH_TOKEN: ${{ github.token }}
